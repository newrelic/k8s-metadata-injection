name: Lint, Build, E2E Test

on:
  push:
    branches:
      - main
      - master
      - renovate/**
  release: 
    types: [published]
  pull_request:
  workflow_dispatch: 

jobs:
  build:
    name: Build integration for
    runs-on: ubuntu-latest
    strategy:
      matrix:
        goos: [ linux ]
        goarch: [ amd64, arm64, arm ]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v5
        with:
          go-version-file: 'go.mod'
      - name: Build integration
        env:
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.goarch }}
        run: |
          make compile

  chart-lint:
    name: Helm chart Lint
    runs-on: ubuntu-24.04
    timeout-minutes: 10
    strategy:
      max-parallel: 5
      matrix:
        kubernetes-version: ["v1.30.0", "v1.29.5", "v1.28.3", "v1.27.5", "v1.26.8"]
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - uses: helm/chart-testing-action@v2.6.1

      - name: Lint charts
        run: ct --config .github/ct.yaml lint --debug

      - name: Check for changed installable charts
        id: list-changed
        run: |
          changed=$(ct --config .github/ct.yaml list-changed)
          if [[ -n "$changed" ]]; then
            echo "::set-output name=changed::true"
          fi
      - name: Run helm unit tests
        if: steps.list-changed.outputs.changed == 'true'
        run: |
          helm plugin install https://github.com/helm-unittest/helm-unittest
          for chart in $(ct --config .github/ct.yaml list-changed); do
            if [ -d "$chart/tests/" ]; then
              helm unittest $chart
            else
                echo "No unit tests found for $chart"
            fi
          done
      - name: Setup Minikube
        uses: manusa/actions-setup-minikube@v2.12.0
        if: steps.list-changed.outputs.changed == 'true'
        with:
          minikube version: v1.34.0
          kubernetes version: ${{ matrix.kubernetes-version }}
          github token: ${{ secrets.GITHUB_TOKEN }}
      - uses: actions/setup-go@v5
        if: steps.list-changed.outputs.changed == 'true'
        with:
          go-version-file: 'go.mod'
      - name: Create image for chart testing
        if: steps.list-changed.outputs.changed == 'true'
        run: |
          GOOS=linux GOARCH=amd64 make compile # Set GOOS and GOARCH explicitly since Dockerfile expects them in the binary name
          DOCKER_BUILDKIT=1 docker build -t e2e/metadata-injection:test  .
          minikube image load e2e/metadata-injection:test
          kubectl create ns ct
      - name: Test install charts
        if: steps.list-changed.outputs.changed == 'true'
        run: ct install --namespace ct --config .github/ct.yaml --debug
      - name: Test upgrade charts
        if: steps.list-changed.outputs.changed == 'true'
        run: ct install --namespace ct --config .github/ct.yaml --debug --upgrade

  test:
    name: Unit tests
    needs: [ build ]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v5
        with:
          go-version-file: 'go.mod'
      - name: Run unit tests
        run: make test
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@b9fd7d16f6d7d1b5d2bec1a2887e65ceed900238 # v4.6.0
        with:
          fail_ci_if_error: false
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

  static-analysis:
    name: Static analysis and linting
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v5
        with:
          go-version-file: 'go.mod'
      - uses: newrelic/newrelic-infra-checkers@v1
      # - name: Semgrep
      #   uses: returntocorp/semgrep-action@v1
      #   with:
      #     auditOn: push
      - name: golangci-lint
        uses: golangci/golangci-lint-action@v6
        continue-on-error: ${{ github.event_name != 'pull_request' }}
        with:
          only-new-issues: true

  e2e-kubernetes:
    name: Kubernetes E2E tests
    needs: [ test ]
    runs-on: ubuntu-24.04
    env:
      E2E_KUBERNETES_VERSION: ${{ matrix.k8s-version }}
      DOCKER_BUILDKIT: '1' # Setting DOCKER_BUILDKIT=1 ensures TARGETOS and TARGETARCH are populated
    strategy:
      fail-fast: false
      max-parallel: 5
      matrix:
        k8s-version: ["v1.30.0", "v1.29.5", "v1.28.3", "v1.27.5", "v1.26.8"]
        cri: [ containerd ]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v5
        with:
          go-version-file: 'go.mod'
      - run: make e2e-test
    
  notify-failure:
    if: ${{ always() && failure() }}
    needs: [ e2e-kubernetes ]
    runs-on: ubuntu-latest
    steps:
      - name: Notify failure via Slack
        uses: archive/github-actions-slack@df8416e7f4856b362a349c63b48165b42fc2f3b4 # v2.9.0
        with:
          slack-bot-user-oauth-access-token: ${{ secrets.slack_token }}
          slack-channel: ${{ secrets.slack_channel }}
          slack-text: "‚ùå `${{ env.ORIGINAL_REPO_NAME }}`: <${{ github.server_url }}/${{ env.ORIGINAL_REPO_NAME }}/actions/runs/${{ github.run_id }}|'Kubernetes E2E tests' failed>."